# Travis CI (MIT License) configuration file for WordPress theme wd_s.
# @link https://travis-ci.org/

# For use with the WordPress theme wd_s.
# @link https://github.com/WebDevStudios/wd_s

# Ditch sudo and use containers.
# @link http://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link http://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    fast_finish: true

    include:
        - php: '5.6'
          env: SNIFF=1 # Most production environments are still running PHP 5.6
        - php: '7.0'
        - php: '7.1'

    allow_failures:
        - php: '7.1'

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    - export PHPCS_DIR=/tmp/phpcs
    - export SNIFFS_DIR=/tmp/sniffs
    # Install the latest version of Node (required to run ESLint).
    - nvm install node
    - nvm use node
    # Install CodeSniffer for WordPress Coding Standards checks.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b 2.9 --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
    # Install WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR; fi
    # Install PHP Compatibility sniffs.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git $SNIFFS_DIR/PHPCompatibility; fi
    # Set install path for PHPCS sniffs.
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs --config-set installed_paths $SNIFFS_DIR; fi
    # After CodeSniffer install you should refresh your path.
    - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi
    # Install ESLint: The pluggable linting utility for JavaScript and JSX.
    # @link http://eslint.org/
    - if [[ "$SNIFF" == "1" ]]; then npm i -g eslint; fi
    # Install WordPress JavaScript Coding Standards shareable config for ESLint.
    # @link https://www.npmjs.com/package/eslint-config-wordpress
    - if [[ "$SNIFF" == "1" ]]; then npm i -g eslint-config-wordpress; fi
    # Install Sass Lint.
    # @link https://github.com/sasstools/sass-lint
    - if [[ "$SNIFF" == "1" ]]; then npm i -g sass-lint; fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
    # WordPress Coding Standards.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
    # --standard: Use WordPress-Extra as the standard (specificed in phpcs.xml)
    # --extensions: Only sniff PHP files.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs -p -s -v -n . --standard=./phpcs.xml --extensions=php; fi
    # Run the theme JavaScript partials through ESLint.
    - if [[ "$SNIFF" == "1" ]]; then eslint -v -c ./.eslintrc.js ./assets/scripts/concat; fi
    # Run the theme Sass partials through Sass Lint.
    - if [[ "$SNIFF" == "1" ]]; then sass-lint -v -q -c ./.sass-lint.yml ./assets/sass/**/*.scss; fi

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
  slack:
    secure: lDFLE+EZrQu9phgxUFFekrH4nqdbeY/qDdOVYD4QRznHGdfNswn7HhVt7CAGjVHEiqkG9J6LzZCOxjy93TMoXgRr/hIBkqJI2oYDBwlEf0P3G0XiPEuWSQvm8Ao9N7nUoF2OlyeA44SRuFTrAbNKjlAw4Nwk08Ew3LjByREYJ6k=

# Caching
# @link https://docs.travis-ci.com/user/caching/
cache:
  directories:
    - node_modules
